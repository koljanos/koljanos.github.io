# Пробный урок
## Функции
###  Что мы узнаем за урок:
1. Что такое функция?
	* Что такое параметр функции
	* Виды параметров функции
	* Как возвращать значения вычислений функции
2. Как написать собственную функцию, имеющую или не имеющую возвращаемый тип
3. Как задать свои входные параметры для функции
4. Рассмотрим домашнее задание на следующий урок. 

### Что такое функция?
> **Функция** - фрагмент кода, который сгруппирован, имеет свое имя, который можно вызвать из других участков программы. 
Функция состоит из своего *имени*, определенного набора *входных параметров* и набора *возвращаемых значений*. Функцию можно вызвать с целью выполнить набор действий, и/или получить их результат. В Swift, функция выглядит следующим образом:

```‌swift 
func functionName (параметры) -> ВозвращаемыйТип {
    // Тело функции

} 
```

И у нее может быть один или несколько входных параметров, как их и может и не быть. Также функция может возвращать одно или несколько значений, а может и не возвращать, все зависит от необходимости. 

Также как и в случае с определением переменной `var` или константы `let`, для определения функции требуется ключевое слово - `func`. Это требуется для того, чтобы компилятор понял что дальше пойдет объявление функции. После ключевого слова `func` следует задать *название функции*, называть можно как угодно, но обычно объявляют функцию с строчной первой буквой, чтобы не было путаницы далее.

#### Параметры функции

После названия функции в скобках перечисляют входные параметры, которые будут влиять на исполнение кода:

```swift
func printItTwice(it: String) {
    print(it)
    print(it)
}
```

Параметров может быть сколько угодно, но главное следить за их типами. 
Вот пример функции без параметра:

```swift
func printPi() {
    print(3.14159)
}
```

При вызове функции, у которой есть несколько параметров, как же swift различает один параметр от другого?
Это может быть *имя* или *позиция*.
С именем все просто - имя параметра заодно задает и название переменной, которую мы можем использовать внутри функции. 

```swift
func printItTwice(it: String) {
    print(it)
    print(it)
}
```

Если название аргумента тяжело использовать в теле функции, то его можно задать отдельно от названия параметра в теле функции написав сначала название параметра, а потом уже название по которому параметр будет использоваться внутри функции. 

```swift
func sayHello(to person: String, and anotherPerson: String) {
    print("Привет, \(person) и \(anotherPerson)")
}
```

В данном коде название параметра `to`, а значение этого параметра используется в теле функции в переменной `person`, тоже самое и с `anotherPerson`.
Всегда указывать названия параметров довольно неудобно с точки зрения читабельности кода. Поэтому можно использовать позиционные аргументы, поставив нижний прочерк `_` перед именем параметра в объявлении функции:

```swift
func sayHello(_ to person: String, and anotherPerson: String) {
    print("Привет, \(person) и \(anotherPerson)")
}
```

Иногда приходится использовать значения по умолчанию, для того, чтобы иметь возможность запустить функцию, даже если одно из значений не указано: 

```swift
func display(teamName: String, score: Int = 0){
    print("\(teamName): \(score)")
}
```

> **Задание:** Напишите функцию, которая насчитывает стоимость поездки в такси. Стоимость поездки в такси установлена законодательно и рассчитывается следующим образом: **минимальная стоимость заказа** 200 рублей плюс 50 копеек за **каждые** 100 метров. Функция получает на вход длину поездки в км. и **печатает** стоимость поездки в консоль.

#### Возвращение значений:
В основном функции используют с целью обработки значений и возврата результата обработки. Для этого сложный код разработчики структурируют в функцию, поведение которой им известно заранее. И потом используют результат работы функции, ее значение.
Чтобы вернуть значение, надо сначала указать *тип* значения, это делается при помощи символа `->` за которым указывается тип. Это все надо сделать в заголовке функции. Пример в коде ниже:

```swift
func multiply (a: Int, b: Int) -> {
    
}
```

Далее функция может возвращать значения, а может и не возвращать. Возврат значений подразумевает под собой алгоритм передачи данных обратно в исполняемый код, мы можем использовать результат функции в рамках вычислений и присваивания. Чтобы указать какие значения будут возвращаться по итогу работы функции, следует использовать оператор `return`.

```swift
func multiply (a: Int, b: Int) -> Int{
    return a * b
}
```


# Самостоятельная работа:

## Создание функций:
1. Создайте функцию, которая представит вас в консоли.
2. Создайте функцию, которая будет работать как [волшебный шар восьмерка](https://www.ball-8.ru), случайно. Используйте для этого оператор
   ```swift
   let randomNum = Int.random(in: 0...4)
   ```
После которого вы будете печатать одно из четырех предсказаний. 
## Фитнес трекер
1. Создайте переменную `steps`, хранящее число шагов полььзователя, а также функцию, `incrementSteps`, которая будет увеличивать количество шагов на один при каждом ее вызове.
2. Создайте константу `goal`, относительно которой будет работать функция  `progressUpdate`, целью этой функции будет поощрение пользователя фитнес трекера.
   * Если пользователь прошел менее 10% шагов функция должна напечатать **"Отличное начало!"**
   * Если пользователь прошел более 10% но менее 50% шагов, функция должна напечатать **"Ты почти на полпути к цели!"**
   * Если пользователь прошел более 50% но менее 90% шагов, функция должна напечатать **"Осталось меньше половины, так держать!"**
   * Если более 90% то функция должна напечатать **"Ты почти у цели"**
   * И если больше цели, то **"Цель достигнута"**
3. Предъидущую функцию перепишите таким образом, чтобы она использовала параметры `steps` и `goal`
4. Напишите функцию, которая **возвращала** темп бега. параметры функции: `currentDistance`, `totalDistance`, `currentTime`. Темп бега рассчитывается следующим образом: *текущее время* надо поделить на частное *текущего расстояния* и *общего расстояния*. 

Не забудьте вызвать свои функции и посмотреть на результаты их работы. 

  